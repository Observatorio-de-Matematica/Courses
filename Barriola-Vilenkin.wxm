/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 16.04.2 ] */

/* [wxMaxima: title   start ]
Barriola-Vilenkin metric
   [wxMaxima: title   end   ] */

/* [wxMaxima: comment start ]
TeX:

\hypersetup{pdfauthor={Daniel Volinski},
            pdftitle={Barriola-Vilenkin metric},
            pdfsubject={General Relativity}}

Written by Daniel Volinski at \href{mailto:danielvolinski@yahoo.es}{danielvolinski@yahoo.es}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
info:build_info()$info@version;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
reset()$kill(all)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
derivabbrev:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratprint:false$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
fpprintprec:5$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
if get('draw,'version)=false then load(draw)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxplot_size:[1024,768]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
if get('optvar,'version)=false then load(optvar)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
if get('rkf45,'version)=false then load(rkf45)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
declare(trigsimp,evfun)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
declare(s,mainvar)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: section start ]
Settings
   [wxMaxima: section end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: input   start ] */
assume(r≥0)$
assume(θ≥0,θ≤π)$
assume(sin(θ)≥0)$
assume(φ≥0,φ≤2*π)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ct_coords:[t,r,θ,φ]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
dim:length(ct_coords)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
orderless(m,c,K)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
declare([c,K],constant)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
assume(m>0,c>0,K>0)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
params:[m=1,c=1,K=0.21]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
τ:16$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Covariant Metric Tensor}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(lg:matrix([-c²,0,0,0],[0,1,0,0],[0,0,K²*r²,0],[0,0,0,K²*r²*sin(θ)²]))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Contravariant Metric Tensor}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(ug:invert(lg))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Line element}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(ds²=diff(ct_coords).lg.transpose(diff(ct_coords)))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: section start ]
Using optvar
   [wxMaxima: section end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: input   start ] */
kill(labels)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
depends(ct_coords,s)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Lagrangian}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(L:m*diff(ct_coords,s).lg.transpose(diff(ct_coords,s)))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Momentum Conjugate}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(P_t:ev(diff(L,'diff(t,s))))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
linsolve(p_t=P_t,diff(t,s)),factor;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ldisplay(P_r:ev(diff(L,'diff(r,s))))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
linsolve(p_r=P_r,diff(r,s)),factor;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ldisplay(P_θ:ev(diff(L,'diff(θ,s))))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
linsolve(p_θ=P_θ,diff(θ,s)),factor;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ldisplay(P_φ:ev(diff(L,'diff(φ,s))))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
linsolve(p_φ=P_φ,diff(φ,s)),factor;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Generalized Forces}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(F_t:diff(L,t))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ldisplay(F_r:factor(trigreduce(diff(L,r))))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ldisplay(F_θ:factor(trigreduce(diff(L,θ))))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ldisplay(F_φ:diff(L,φ))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Euler-Lagrange Equations}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
aa:el(L,ct_coords,s)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bb:ev(aa,eval,diff)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bb[1]:subst([k[0]=-E],-bb[1])$
bb[3]:subst([k[1]=Λ],bb[3])$
bb[7]:subst([k[4]=J],bb[7])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bb[2]:lhs(bb[2])-rhs(bb[2])=0$
bb[4]:lhs(bb[4])-rhs(bb[4])=0$
bb[5]:lhs(bb[5])-rhs(bb[5])=0$
bb[6]:lhs(bb[6])-rhs(bb[6])=0$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Conservation Laws}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
map(ldisp,radcan(part(bb/m,[1,3,7])))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Express the Energy in terms of the Angular Momentum}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
linsolve(eliminate(part(bb,[1,7]),[diff(φ,s)]),E),expand;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Equations of Motion}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
map(ldisp,radcan(part(bb/m,[2,4,5,6])))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Solve for second derivative of coordinates}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
linsol:linsolve(part(bb,[2,4,5,6]),diff(ct_coords,s,2))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
map(ldisp,radcan(linsol))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Check Conservation of Energy}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
radcan(lhs(bb[1]));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
subst(linsol,diff(lhs(bb[1]),s)),expand;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Check Conservation of} $\Lambda$

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
radcan(lhs(bb[3]));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
subst(linsol,diff(lhs(bb[3]),s));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Check Conservation of Angular Momentum}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
radcan(lhs(bb[7]));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
subst(linsol,diff(lhs(bb[7]),s)),expand;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Legendre Transformation}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kill(labels)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Legendre:linsolve([p_t=P_t,p_r=P_r,p_θ=P_θ,p_φ=P_φ],
         ['diff(t,s),'diff(r,s),'diff(θ,s),'diff(φ,s)])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
map(ldisp,radcan(Legendre))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Hamiltonian}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(H:ev(p_t*'diff(t,s)+p_r*'diff(r,s)+
  p_θ*'diff(θ,s)+p_φ*'diff(φ,s)-L,Legendre,radcan))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Equations of Motion}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Hq:makelist(Hq[i],i,1,2*dim)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Hq[1]:'diff(t,s)=diff(H,p_t)$
Hq[2]:'diff(r,s)=diff(H,p_r)$
Hq[3]:'diff(θ,s)=diff(H,p_θ)$
Hq[4]:'diff(φ,s)=diff(H,p_φ)$
Hq[5]:'diff(p_t,s)=-diff(H,t)$
Hq[6]:'diff(p_r,s)=-diff(H,r)$
Hq[7]:'diff(p_θ,s)=-diff(H,θ)$
Hq[8]:'diff(p_φ,s)=-diff(H,φ)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
map(ldisp,Hq:radcan(Hq))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Check Conservation of Energy}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
depends([p_t,p_r,p_θ,p_φ],s)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
subst(Hq,diff(H,s)),expand;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Reduce Order}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kill(labels)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
cv_coords:[T,R,Θ,Φ]$
depends(cv_coords,s)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
gradef(t,s,T)$
gradef(r,s,R)$
gradef(θ,s,Θ)$
gradef(φ,s,Φ)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Euler-Lagrange Equations}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
aa:el(L,ct_coords,s)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bb:ev(aa,eval,diff)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bb[1]:subst([k[0]=-E],-bb[1])$
bb[3]:subst([k[1]=Λ],bb[3])$
bb[7]:subst([k[4]=J],bb[7])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
bb[2]:lhs(bb[2])-rhs(bb[2])=0$
bb[4]:lhs(bb[4])-rhs(bb[4])=0$
bb[5]:lhs(bb[5])-rhs(bb[5])=0$
bb[6]:lhs(bb[6])-rhs(bb[6])=0$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Conservation Laws}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(Epm:expand(bb[1]/m))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ldisplay(Λpm:expand(bb[3]/m))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ldisplay(Jpm:expand(bb[7]/m))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Equations of Motion}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
map(ldisp,radcan(part(bb/m,[2,4,5,6])))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Solve for second derivative of coordinates}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
linsol:linsolve(part(bb,[2,4,5,6]),diff(ct_coords,s,2))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
map(ldisp,radcan(linsol))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Numerical solution (Lagrangian)}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kill(labels)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
funcs:append(ct_coords,cv_coords)$ldisplay(funcs)$
initial:[0,15,π/2,π/4,2.022,-1.7,-0.1,-0.1]$ldisplay(initial)$
odes:append(cv_coords,map('rhs,linsol))$ldisplay(odes)$
interval:[s,0,τ]$ldisplay(interval)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
P:map("=",funcs,initial)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
lgP:lg,P,params$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
gVV:factor(diff(ct_coords).lgP.transpose(diff(ct_coords)))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
gVVP:gVV,P,params;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rksol:rkf45(odes,funcs,initial,interval,
            absolute_tolerance=1E-12,report=true),params$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
table_form(rksol,column_names=append([s],funcs))$
   [wxMaxima: comment end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: input   start ] */
wxplot2d([[discrete,map(lambda([u],part(u,[1,2])),rksol)],
          [discrete,map(lambda([u],part(u,[1,3])),rksol)],
          [discrete,map(lambda([u],part(u,[1,4])),rksol)],
          [discrete,map(lambda([u],part(u,[1,5])),rksol)]],
         [style,[lines,1]],[xlabel,"s"],[ylabel,"value"],
         [legend,"t","r","θ","φ"],
         [gnuplot_preamble,"set key top left"])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: input   start ] */
wxplot2d([[discrete,map(lambda([u],part(u,[1,6])),rksol)],
          [discrete,map(lambda([u],part(u,[1,7])),rksol)],
          [discrete,map(lambda([u],part(u,[1,8])),rksol)],
          [discrete,map(lambda([u],part(u,[1,9])),rksol)]],
         [style,[lines,1]],[xlabel,"s"],[ylabel,"value"],
         [legend,"dt/ds","dr/ds","dθ/ds","dφ/ds"],
         [gnuplot_preamble,"set key bottom right"])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: input   start ] */
wxplot2d([[discrete,map(lambda([u],part(u,[2,6])),rksol)],
          [discrete,[part(initial,[1,5])]]],[axes,solid],
         [title,"Phase Space for t"],[point_type,circle],
         [style,[lines,2],[points,3]],[color,magenta,red],
         [xlabel,"t"],[ylabel,"dt/ds"],[legend,false])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: input   start ] */
wxplot2d([[discrete,map(lambda([u],part(u,[3,7])),rksol)],
          [discrete,[part(initial,[2,6])]]],[axes,solid],
         [title,"Phase Space for r"],[point_type,circle],
         [style,[lines,2],[points,3]],[color,magenta,red],
         [xlabel,"r"],[ylabel,"dr/ds"],[legend,false])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: input   start ] */
wxplot2d([[discrete,map(lambda([u],part(u,[4,8])),rksol)],
          [discrete,[part(initial,[3,7])]]],[axes,solid],
         [title,"Phase Space for θ"],[point_type,circle],
         [style,[lines,2],[points,3]],[color,magenta,red],
         [xlabel,"θ"],[ylabel,"dθ/ds"],[legend,false])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: input   start ] */
wxplot2d([[discrete,map(lambda([u],part(u,[5,9])),rksol)],
          [discrete,[part(initial,[4,8])]]],[axes,solid],
         [title,"Phase Space for φ"],[point_type,circle],
         [style,[lines,2],[points,3]],[color,magenta,red],
         [xlabel,"φ"],[ylabel,"dφ/ds"],[legend,false])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: input   start ] */
draw3d(title = "Barriola-Vilenkin Geodesic",
       proportional_axes = xyz, axis_3d = false,
       xlabel = "", ylabel = "", zlabel = "",
       dimensions = wxplot_size,
       view = [80,185],
       file_name = "Barriola_Vilenkin_Geodesic1",
       terminal = 'pngcairo,

       transform = [r*sin(θ)*cos(φ),r*sin(θ)*sin(φ),r*cos(θ),r,θ,φ],

       color = black,
       point_size = 2,
       point_type = filled_circle,
       points([[0,0,0]]),
    
       color = blue,
       point_size = 1,
       point_type = -1,
       points_joined = true,
       points(map(lambda([u],part(u,[3,4,5])),rksol)),

       color = red,
       point_size = 1,
       point_type = circle,
       points([part(initial,[2,3,4])])),params$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
show_image("Barriola_Vilenkin_Geodesic1.png")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Check Conservation of Energy using the Numerical Data}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
P:map("=",funcs,initial)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
W:lhs(Epm),P,params,numer,eval;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxplot2d([discrete,makelist([first(rkline),
          ev(lhs(Epm),map("=",funcs,rest(rkline)))],rkline,rksol)],
         [xlabel,"t"],[ylabel,"Energy/mass"],[y,W-0.001,W+0.001]),params$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Check Conservation of} $\Lambda$ \textbf{using the Numerical Data}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
W:lhs(Λpm),P,params,numer,eval;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxplot2d([discrete,makelist([first(rkline),
          ev(lhs(Λpm),map("=",funcs,rest(rkline)))],rkline,rksol)],
         [xlabel,"s"],[ylabel,"Λ/mass"],[y,W-0.001,W+0.001]),params$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Check Conservation of Angular Momentum using the Numerical Data}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
W:lhs(Jpm),P,params,numer,eval;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxplot2d([discrete,makelist([first(rkline),
          ev(lhs(Jpm),map("=",funcs,rest(rkline)))],rkline,rksol)],
         [xlabel,"s"],[ylabel,"Angular Momentum/mass"],[y,W-0.001,W+0.001]),params$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Minimal Radius}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(r_m:lmin(map(lambda([u],part(u,3)),rksol)))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{at proper time}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(s_m:assoc(r_m,map(lambda([u],part(u,[3,1])),rksol)))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{at coordinate time}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ldisplay(t_m:assoc(r_m,map(lambda([u],part(u,[3,2])),rksol)))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Numerical solution (Hamiltonian)}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kill(labels)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Calculate the initial values}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
initialH:initial$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
initialH[5]:P_t,['diff(t,s)=diff(t,s)],P,params,numer$
initialH[6]:P_r,['diff(r,s)=diff(r,s)],P,params,numer$
initialH[7]:P_θ,['diff(θ,s)=diff(θ,s)],P,params,numer$
initialH[8]:P_φ,['diff(φ,s)=diff(φ,s)],P,params,numer$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
funcs:[t,r,θ,φ,p_t,p_r,p_θ,p_φ]$ldisplay(funcs)$
ldisplay(initialH)$
odes:map('rhs,Hq)$ldisplay(odes)$
ldisplay(interval)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rksol:rkf45(odes,funcs,initialH,interval,
            absolute_tolerance=1E-12,report=true),params$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
table_form(rksol,column_names=append([s],funcs))$
   [wxMaxima: comment end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: input   start ] */
wxplot2d([[discrete,map(lambda([u],part(u,[1,2])),rksol)],
          [discrete,map(lambda([u],part(u,[1,3])),rksol)],
          [discrete,map(lambda([u],part(u,[1,4])),rksol)],
          [discrete,map(lambda([u],part(u,[1,5])),rksol)]],
         [style,[lines,1]],[xlabel,"s"],[ylabel,"value"],
         [legend,"t","r","θ","φ"],
         [gnuplot_preamble,"set key top left"])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: input   start ] */
wxplot2d([[discrete,map(lambda([u],part(u,[1,6])),rksol)],
          [discrete,map(lambda([u],part(u,[1,7])),rksol)],
          [discrete,map(lambda([u],part(u,[1,8])),rksol)],
          [discrete,map(lambda([u],part(u,[1,9])),rksol)]],
         [style,[lines,1]],[xlabel,"s"],[ylabel,"value"],
         [legend,"p_t","p_r","p_θ","p_φ"],
         [gnuplot_preamble,"set key top left"])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: input   start ] */
wxplot2d([[discrete,map(lambda([u],part(u,[2,6])),rksol)],
          [discrete,[part(initialH,[1,5])]]],[axes,solid],
         [title,"Phase Space for t"],[point_type,circle],
         [style,[lines,2],[points,3]],[color,magenta,red],
         [xlabel,"t"],[ylabel,"p_t"],[legend,false])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: input   start ] */
wxplot2d([[discrete,map(lambda([u],part(u,[3,7])),rksol)],
          [discrete,[part(initialH,[2,6])]]],[axes,solid],
         [title,"Phase Space for r"],[point_type,circle],
         [style,[lines,2],[points,3]],[color,magenta,red],
         [xlabel,"r"],[ylabel,"p_r"],[legend,false])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: input   start ] */
wxplot2d([[discrete,map(lambda([u],part(u,[4,8])),rksol)],
          [discrete,[part(initialH,[3,7])]]],[axes,solid],
         [title,"Phase Space for θ"],[point_type,circle],
         [style,[lines,2],[points,3]],[color,magenta,red],
         [xlabel,"θ"],[ylabel,"p_θ"],[legend,false])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: input   start ] */
wxplot2d([[discrete,map(lambda([u],part(u,[5,9])),rksol)],
          [discrete,[part(initialH,[4,8])]]],[axes,solid],
         [title,"Phase Space for φ"],[point_type,circle],
         [style,[lines,2],[points,3]],[color,magenta,red],
         [xlabel,"φ"],[ylabel,"p_φ"],[legend,false])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: input   start ] */
draw3d(title = "Barriola Vilenkin Geodesic",
       proportional_axes = xyz, axis_3d = false,
       xlabel = "", ylabel = "", zlabel = "",
       dimensions = wxplot_size,
       view = [80,185],
       file_name = "Barriola_Vilenkin_Geodesic2",
       terminal = 'pngcairo,
       
       transform = [r*sin(θ)*cos(φ),r*sin(θ)*sin(φ),r*cos(θ),r,θ,φ],
    
       color = blue,
       point_size = 1,
       point_type = -1,
       points_joined = true,
       points(map(lambda([u],part(u,[3,4,5])),rksol)),
       
       color = red,
       point_size = 1,
       point_type = circle,
       points_joined = false,
       points([part(initialH,[2,3,4])]),
       
       color = black,
       point_size = 2,
       point_type = filled_circle,
       points([[0,0,0]])),params$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
show_image("Barriola_Vilenkin_Geodesic2.png")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Check Conservation of Energy using the Numerical Data}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
P:map("=",funcs,initialH)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
Y:H/m,P,params,numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxplot2d([discrete,makelist([first(rkline),
          ev(H/m,map("=",funcs,rest(rkline)))],rkline,rksol)],
         [xlabel,"s"],[ylabel,"Energy/mass"],[y,Y-0.001,Y+0.001]),params$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: page break    ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: section start ]
Using ctensor
   [wxMaxima: section end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: input   start ] */
kill(labels)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
if get('itensor,'version)=false then load(itensor)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
imetric(g)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
if get('ctensor,'version)=false then load(ctensor)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
dim:length(ct_coords)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ctrgsimp:true$
ratchristof:true$
ratriemann:true$
rateinstein:true$
ratweyl:true$
ratfac:true$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
cmetric()$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Covariant Metric tensor}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ishow(g([μ,ν],[])=lg)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Contravariant Metric tensor}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ishow(g([],[μ,ν])=ug)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Christoffel Symbol of the first kind}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
christof(false)$
for i thru dim do for j:i thru dim do for k thru dim do
  if lcs[i,j,k]≠0 then
    ishow(Γ([ct_coords[i],ct_coords[j],ct_coords[k]],[])=lcs[i,j,k])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Christoffel Symbol of the second kind}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
christof(false)$
for i thru dim do for j:i thru dim do for k thru dim do
  if mcs[i,j,k]≠0 then
    ishow(Γ([ct_coords[i],ct_coords[j]],[ct_coords[k]])=mcs[i,j,k])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Covariant Divergence}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
checkdiv(lg)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
trigsimp(arrayapply(div,[2]));
trigsimp(arrayapply(div,[3]));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Covariant Gradient of a scalar function}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
depends(ρ,r)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
cograd(ρ,g1)$
listarray(g1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Contravariant Gradient of a scalar function}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
contragrad(ρ,g2)$
listarray(g2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{d'Alembertian of a scalar function}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
collectterms(expand(dscalar(ρ)),diff(ρ,r,2),diff(ρ,r));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Riemann Tensor}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
riemann(false)$
lriemann(false)$
uriemann(false)$
for a thru dim do for b thru dim do
  for c thru (if symmetricp(lg,dim) then b else dim) do
    for d thru (if symmetricp(lg,dim) then a else dim) do
      if riem[a,b,c,d]≠0 then
        ishow(R([ct_coords[a],ct_coords[b],ct_coords[c]],[ct_coords[d]])=riem[a,b,c,d])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for a thru dim do for b thru dim do
  for c thru (if symmetricp(lg,dim) then b else dim) do
    for d thru (if symmetricp(lg,dim) then a else dim) do
      if lriem[a,b,c,d]≠0 then
        ishow(R([ct_coords[d],ct_coords[a],ct_coords[b],ct_coords[c]],[])=lriem[a,b,c,d])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Ricci Tensor}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ric:zeromatrix(dim,dim)$
ricci(false)$
uricci(false)$
for i thru dim do for j:i thru dim do
  if ric[i,j]≠0 then
    ishow(R([ct_coords[i],ct_coords[j]])=ric[i,j])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Scalar curvature}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
factor(radcan(scurvature()));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Compute trace of Ricci tensor}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
factor(radcan(tracer));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Kretschmann invariant}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
factor(radcan(rinvariant()));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Landau-Lifshitz Lagrangian}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
LL:sqrt(-gdet)*scurvature();
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Einstein Tensor}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lein:zeromatrix(dim,dim)$
einstein(false)$
leinstein(false)$
for i thru dim do for j:i thru dim do
  if lein[i,j]≠0 then 
    ishow(G([ct_coords[i],ct_coords[j]],[])=lein[i,j])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Weyl Conformal tensor}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kill(W)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
weyl(false)$
for i thru dim do
  for j from (if symmetricp(lg,dim) then i+1 else 1) thru dim do
    for k from (if symmetricp(lg,dim) then i else 1) thru dim do
      for l from (if symmetricp(lg,dim) then k+1 else 1) thru (if (symmetricp(lg,dim) and k=i) then j else dim) do
        if weyl[i,j,k,l]≠0 then
          ishow(W([ct_coords[i],ct_coords[j],ct_coords[k],ct_coords[l]],[])=weyl[i,j,k,l])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Geodesics}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
cgeodesic(false)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for i thru dim do ldisplay(geod[i]:radcan(geod[i]))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
TeX:

\textbf{Solve for second derivative of coordinates}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
Eq:makelist(Eq[i],i,1,dim)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for i thru dim do Eq[i]:first(linsolve(geod[i],diff(ct_coords[i],s,2)))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
map(ldisp,radcan(Eq))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
